=========================================================================================== test session starts ============================================================================================
platform linux -- Python 3.10.12, pytest-8.4.0, pluggy-1.6.0
rootdir: /home/matheus/Documents/engenharia_de_software_2_tp
plugins: anyio-4.3.0, requests-mock-1.11.0
collected 5 items                                                                                                                                                                                          

e2e.py .FFFF                                                                                                                                                                                         [100%]

================================================================================================= FAILURES =================================================================================================
__________________________________________________________________________________________ test_townhall_buttons ___________________________________________________________________________________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="cf0220333348add36ff8424d9625a0ff")>

    def test_townhall_buttons(driver):
        """Test clicking a Town Hall button updates UI."""
        driver.get("http://localhost:8501")
>       th_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'TH 10')]"))
        )

e2e.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cf0220333348add36ff8424d9625a0ff")>, method = <function element_to_be_clickable.<locals>._predicate at 0x79bdb87aac20>, message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5d87c76a8863 <unknown>
E       #1 0x5d87c739e8c6 <unknown>
E       #2 0x5d87c73e9618 <unknown>
E       #3 0x5d87c73e96d1 <unknown>
E       #4 0x5d87c742c744 <unknown>
E       #5 0x5d87c740b5cd <unknown>
E       #6 0x5d87c7429c19 <unknown>
E       #7 0x5d87c740b343 <unknown>
E       #8 0x5d87c73dc593 <unknown>
E       #9 0x5d87c73dcf5e <unknown>
E       #10 0x5d87c766c84b <unknown>
E       #11 0x5d87c76707a5 <unknown>
E       #12 0x5d87c765a571 <unknown>
E       #13 0x5d87c7671332 <unknown>
E       #14 0x5d87c763f87f <unknown>
E       #15 0x5d87c7697728 <unknown>
E       #16 0x5d87c76978fb <unknown>
E       #17 0x5d87c76a79b4 <unknown>
E       #18 0x777014e94ac3 <unknown>

../../.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
__________________________________________________________________________________________ test_hero_input_fields __________________________________________________________________________________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="cf0220333348add36ff8424d9625a0ff")>

    def test_hero_input_fields(driver):
        """Test presence of hero input fields."""
        driver.get("http://localhost:8501")
        input_elements = driver.find_elements(By.CSS_SELECTOR, "input[type='number']")
>       assert len(input_elements) > 0
E       assert 0 > 0
E        +  where 0 = len([])

e2e.py:49: AssertionError
____________________________________________________________________________________________ test_apply_button _____________________________________________________________________________________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="cf0220333348add36ff8424d9625a0ff")>

    def test_apply_button(driver):
        """Test clicking the apply button works."""
        driver.get("http://localhost:8501")
>       apply_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Apply Level Changes')]"))
        )

e2e.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cf0220333348add36ff8424d9625a0ff")>, method = <function element_to_be_clickable.<locals>._predicate at 0x79bdb832ab00>, message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5d87c76a8863 <unknown>
E       #1 0x5d87c739e8c6 <unknown>
E       #2 0x5d87c73e9618 <unknown>
E       #3 0x5d87c73e96d1 <unknown>
E       #4 0x5d87c742c744 <unknown>
E       #5 0x5d87c740b5cd <unknown>
E       #6 0x5d87c7429c19 <unknown>
E       #7 0x5d87c740b343 <unknown>
E       #8 0x5d87c73dc593 <unknown>
E       #9 0x5d87c73dcf5e <unknown>
E       #10 0x5d87c766c84b <unknown>
E       #11 0x5d87c76707a5 <unknown>
E       #12 0x5d87c765a571 <unknown>
E       #13 0x5d87c7671332 <unknown>
E       #14 0x5d87c763f87f <unknown>
E       #15 0x5d87c7697728 <unknown>
E       #16 0x5d87c76978fb <unknown>
E       #17 0x5d87c76a79b4 <unknown>
E       #18 0x777014e94ac3 <unknown>

../../.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
___________________________________________________________________________________________ test_setup_dropdown ____________________________________________________________________________________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="cf0220333348add36ff8424d9625a0ff")>

    def test_setup_dropdown(driver):
        """Test selecting a setup from dropdown."""
        driver.get("http://localhost:8501")
>       select_box = driver.find_element(By.XPATH, "//div[@role='listbox']")

e2e.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:914: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x79bdb82924d0>
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x5d87c76978fb \\u003Cunknown>\\n#17 0x5d87c76a79b4 \\u003Cunknown>\\n#18 0x777014e94ac3 \\u003Cunknown>\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@role='listbox']"}
E         (Session info: chrome=123.0.6312.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x5d87c76a8863 <unknown>
E       #1 0x5d87c739e8c6 <unknown>
E       #2 0x5d87c73e9618 <unknown>
E       #3 0x5d87c73e96d1 <unknown>
E       #4 0x5d87c742c744 <unknown>
E       #5 0x5d87c740b5cd <unknown>
E       #6 0x5d87c7429c19 <unknown>
E       #7 0x5d87c740b343 <unknown>
E       #8 0x5d87c73dc593 <unknown>
E       #9 0x5d87c73dcf5e <unknown>
E       #10 0x5d87c766c84b <unknown>
E       #11 0x5d87c76707a5 <unknown>
E       #12 0x5d87c765a571 <unknown>
E       #13 0x5d87c7671332 <unknown>
E       #14 0x5d87c763f87f <unknown>
E       #15 0x5d87c7697728 <unknown>
E       #16 0x5d87c76978fb <unknown>
E       #17 0x5d87c76a79b4 <unknown>
E       #18 0x777014e94ac3 <unknown>

../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException
========================================================================================= short test summary info ==========================================================================================
FAILED e2e.py::test_townhall_buttons - selenium.common.exceptions.TimeoutException: Message: 
FAILED e2e.py::test_hero_input_fields - assert 0 > 0
FAILED e2e.py::test_apply_button - selenium.common.exceptions.TimeoutException: Message: 
FAILED e2e.py::test_setup_dropdown - selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@role='listbox']"}
======================================================================================= 4 failed, 1 passed in 23.80s =======================================================================================
